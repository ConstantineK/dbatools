Things we know:
  Remove a large amount of commands and find the "core" module scope
    - If we do this first then we get to avoid changing things we dont need.

  Replace all urls (lets leave copyrights for now)
  Replace all -Dba in commands we keep with nothing (and suggest the prefix in our module code)
  Remove messaging system and revert to basic PowerShell
  Remove any command that is vastly SQL best practices encoded in a PowerShell file.
    - If we want to keep any of these, we should consider templated SQL.

Things I would posit:
  I think publishing a website in probably too much work for me to care.
    * if you want to that's fine, so lets keep the docs in the module and encourage people to use them.
    * We need to find a good middle ground for some of the commands that are "heavy" and focus our time on problems we want to solve.
      * Setting up and tearing down connections and restoring backups have a lot of overhead at the moment.


Core:
  - Connecting to servers
  - Insanely common or useful operations that solve a problem
  -

Test:
  - Verifying environment (seems like dbachecks is really working on this problem, but what is the middle ground?)
  -
Removin



yeah, connection stuff in general I think lives in "core"
the thing I dont want to do is abstract SMO to posh. When SMO already solves a lot of those problems. The code should import lightning fast

I use that pretty frequently when Test-NetConnection, but I will admit I never looked at the code

which is the building blocks you need to connect, run queries, and do the basics to enumerate, connect, and use your instances
and maybe some other stuff thats really useful

when you suggest a function to be added to the toolset, how do you describe it so that you can fit it into the correct slot

yes, so CORE - TEST (best practice but this also contains stuff like verify things are online,
so maybe thats really another thing called CONFIG or PRACTICE or something idk) -
and really what else do we want thats from them
because I dont think we need to maintain the migration component for instance,
 I actually think thats probably best done in dbatools
since importing a module and migrating an entire sql server is not an important time problem
but like importing it and running queries blows ass

the migration tools did come in handy for me quite a bit
things like copy- users, logins, etc

yeah so the COPY commands are actually pretty useful
which is most of what the migration does

I dont think we need to be able to copy every single thing

right, I think at least the base surface area though
is useful
like the common top 10 things or w/e

but being able to migrate a server to a new box in as little time as possible is huge
yep, maybe even just schema dump. but that's going into the weeds


idk, maybe there is a DEV piece as well, where you have weed growing dev time
like going into tokenization of sql and finding data modification code or syntax formatting or w/e
experiments

our functions should only simplify if they have a weird interface imo

and if we break out the OU's properly, and you have a self-serve style I think that will help with needless shit. If I only want sqshell-core, it should be pretty small

I think anything with dynamic sql generated by a a posh function can probably be canned
im also going to throw in azure support

so powershell core and azure forward sounds good to me

macbook + vagrant + ansible + mssql + sqlshell is a cool combo
